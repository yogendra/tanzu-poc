---
# Source: harbor/templates/chartmuseum/chartmuseum-secret.yaml
apiVersion: v1
kind: Secret
metadata:
  name: "tanzu-harbor-harbor-chartmuseum"
  labels:
    heritage: Helm
    release: tanzu-harbor
    chart: harbor
    app: "harbor"
type: Opaque
data:
  CACHE_REDIS_PASSWORD: ""
---
# Source: harbor/templates/clair/clair-secret.yaml
apiVersion: v1
kind: Secret
metadata:
  name: tanzu-harbor-harbor-clair
  labels:
    heritage: Helm
    release: tanzu-harbor
    chart: harbor
    app: "harbor"
type: Opaque
data:
  config.yaml: Y2xhaXI6CiAgZGF0YWJhc2U6CiAgICB0eXBlOiBwZ3NxbAogICAgb3B0aW9uczoKICAgICAgc291cmNlOiAicG9zdGdyZXM6Ly9wb3N0Z3JlczpjaGFuZ2VpdEB0YW56dS1oYXJib3ItaGFyYm9yLWRhdGFiYXNlOjU0MzIvcG9zdGdyZXM/c3NsbW9kZT1kaXNhYmxlIgogICAgICAjIE51bWJlciBvZiBlbGVtZW50cyBrZXB0IGluIHRoZSBjYWNoZQogICAgICAjIFZhbHVlcyB1bmxpa2VseSB0byBjaGFuZ2UgKGUuZy4gbmFtZXNwYWNlcykgYXJlIGNhY2hlZCBpbiBvcmRlciB0byBzYXZlIHByZXZlbnQgbmVlZGxlc3Mgcm91bmR0cmlwcyB0byB0aGUgZGF0YWJhc2UuCiAgICAgIGNhY2hlc2l6ZTogMTYzODQKICBhcGk6CiAgICAjIEFQSSBzZXJ2ZXIgcG9ydAogICAgcG9ydDogNjA2MAogICAgaGVhbHRocG9ydDogNjA2MQogICAgIyBEZWFkbGluZSBiZWZvcmUgYW4gQVBJIHJlcXVlc3Qgd2lsbCByZXNwb25kIHdpdGggYSA1MDMKICAgIHRpbWVvdXQ6IDMwMHMKICB1cGRhdGVyOgogICAgaW50ZXJ2YWw6IDEyaAo=
  redis: cmVkaXM6Ly90YW56dS1oYXJib3ItaGFyYm9yLXJlZGlzOjYzNzkvNA==
  database: cG9zdGdyZXM6Ly9wb3N0Z3JlczpjaGFuZ2VpdEB0YW56dS1oYXJib3ItaGFyYm9yLWRhdGFiYXNlOjU0MzIvcG9zdGdyZXM/c3NsbW9kZT1kaXNhYmxl
---
# Source: harbor/templates/core/core-secret.yaml
apiVersion: v1
kind: Secret
metadata:
  name: tanzu-harbor-harbor-core
  labels:
    heritage: Helm
    release: tanzu-harbor
    chart: harbor
    app: "harbor"
type: Opaque
data:
  secretKey: "bm90LWEtc2VjdXJlLWtleQ=="
  secret: "Y1J0bGtKMkQ4ZkFFZDJ5Zw=="
  tls.crt: LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSUUwekNDQXJ1Z0F3SUJBZ0lKQVBZL096TE1lVnEyTUEwR0NTcUdTSWIzRFFFQkN3VUFNQUF3SGhjTk1Ua3cKTkRFNE1ESXlOek0zV2hjTk1qa3dOREUxTURJeU56TTNXakFBTUlJQ0lqQU5CZ2txaGtpRzl3MEJBUUVGQUFPQwpBZzhBTUlJQ0NnS0NBZ0VBM3hsVUpzMmIvYUkyTkxveTRPSVErZG4veU1iL085OWlLRFJ5WktwSDhyU09tUytvCkY5dW5tU0F6TDY1WEEvdjZuWTBPTEkvZEFTRGprcWtCcElkVEd6b2dSNWY4VWlCNm9zdUVZN1Y3MVhaZHpXTHIKUGpuSnE2WkxBYW9LbXdHODBXNStXZDZWOFB5Z094NTJta3IxdzdJV0t6KzFaTEk1aXpicHBvbjdYVkdWUmFBVApSdk5aRGlKNkNlSnBjSjVINzIzbGtmNVJ2SldhdFpMQ1lJWURiUmZUaUtzeVEvU2xSY3Y1QlZmSGcvTEpTSDlRCkxHUmhQTUFSbGRsOXd5WkN3WlpESHhoZUk0YSsyNmFhOE1ZM3U5c3QvbDAvT282VkNUR3BNaUVoaUdGMkxWanAKVVdxLytCUDRTRkV2SmZxL0R1aW5JMTM5Vy81YVpaNy9Id1JQbG1ZVTZwWFRSTHlJZzdqZCsxOWZKd1I3WDM3cQp3MG84dDA2RmhqbXJDemFZQ1Vqb1JlcURtSGFObVpOL2Rkdkc3alpXQnUrak5oMFlhdnN5UXlDSVZtdjZ5cVNjCmpQaUQ5dWl2eHFUd2pKaWRJQlJmdVVyejNhRVJRN2NRZ2YwcWhxakl6Zmx6SGJGS2hJTG9jQldxN3p5Tmw5aHIKdlVHVC9XWmN3MHQvT3RNNzJTUGFwbG1UZ1ZiYlFSeGYyVkh6eXB0R0l2dHlkbFhLOHRoeE9NcFhvNGUrU2w4ZAoxZ2RRY0M0b2lzTjlGMjlvTnM4UDV5RlFQLy94WXV2OEM2MDduQ2oxRHpySWQ1YXZHL05WZktCL2ZiREtFRmdOCjJXaEhJblR6UExFY2pGNGZFcmNVQUV1V1cwYnVYLzZGSENHM2lUdHJxeUQ5MktUVkRmTjFKNTZycmNzQ0F3RUEKQWFOUU1FNHdIUVlEVlIwT0JCWUVGRmhOaFRvNFVBQzJQVXNmOGpZYVdqMTYwdkdFTUI4R0ExVWRJd1FZTUJhQQpGRmhOaFRvNFVBQzJQVXNmOGpZYVdqMTYwdkdFTUF3R0ExVWRFd1FGTUFNQkFmOHdEUVlKS29aSWh2Y05BUUVMCkJRQURnZ0lCQU1Bc0V0VmxFTE13ZHRjaWZIZU9UMGtPbWY1d285SW4vZUZTZ3NjQ3pCTURhUngyQjNxMzZBb1MKSWw3WFdBWnBldmFSN1c3eWVBUkthQXNoQkxoeWdVcUxEMHpXYktsU045SHByZDF3ZHBNMGZmeVBwTjVkeE9ZQQplcjA0eTEyR1JuQ2JNWXFpNGN2enRQNFRpblhxcTJ5SFNZaExiTzlxa0k1Z2JXVnhrUnVJY01Ldml4ZGRsbE5ZClEzb2JKYURESG1vdk0zK2cvRysxWUZndDRxRVMzOFhuSjdCclNzaEhubjVFSVFoMjg2eGZKcml5cksyaEhiTEoKcXowWXVGNkczRFhQZVdHZ1h2ajBIaXBjMGY4VURaa0tray9lR0VJNnZFa3l0eXZvZXBvWkkyWGJBZi9aTXk1bgpLd3VoRW40aGhrRk13V2FTV3AvaDBRZE1DYXhrNEJWU09xbU5WYUxTQjcrRmpzSWo0Q2FzRm90WWl5SjJncFJCCk5mOFFhUzRiejBUbjFlQmJDOGtzaitlM1pXZVgyYjV3Vk1qcWw5alR0MlgxSUNzOEtLZTN2RUJranFUMkFVaTIKNTJUdEt6bTczYVdyei9HUHkvUTJMQ29yM0ZoOUZHVlNCT0JCRFhHeTZNSnBOSEpuWVZIOUVFTkZHT2g4NW9sMQoycEFET0JCNXZBVS9rTEI1TEhQajJrdWUvRk1pSGFObnJTWUlHck1sQlNYMmpqOUVZYTF1dVVIK3BkNE1CajFGCjV1SDhPUmlhUTZodDIrV0hrbHhpYzFSajV5VFlRd1ZsSDcwQ0JPbitxVkVkbzYzeVF3ekFNSktGSXdsR1VRRVgKamlsamdjODZxNGNadFVURnJjd01pZGJrKzhRNitKYkRWZzdIVi8rcG5DK3dudjE5N2t3ZQotLS0tLUVORCBDRVJUSUZJQ0FURS0tLS0tCg==
  tls.key: LS0tLS1CRUdJTiBSU0EgUFJJVkFURSBLRVktLS0tLQpNSUlKS1FJQkFBS0NBZ0VBM3hsVUpzMmIvYUkyTkxveTRPSVErZG4veU1iL085OWlLRFJ5WktwSDhyU09tUytvCkY5dW5tU0F6TDY1WEEvdjZuWTBPTEkvZEFTRGprcWtCcElkVEd6b2dSNWY4VWlCNm9zdUVZN1Y3MVhaZHpXTHIKUGpuSnE2WkxBYW9LbXdHODBXNStXZDZWOFB5Z094NTJta3IxdzdJV0t6KzFaTEk1aXpicHBvbjdYVkdWUmFBVApSdk5aRGlKNkNlSnBjSjVINzIzbGtmNVJ2SldhdFpMQ1lJWURiUmZUaUtzeVEvU2xSY3Y1QlZmSGcvTEpTSDlRCkxHUmhQTUFSbGRsOXd5WkN3WlpESHhoZUk0YSsyNmFhOE1ZM3U5c3QvbDAvT282VkNUR3BNaUVoaUdGMkxWanAKVVdxLytCUDRTRkV2SmZxL0R1aW5JMTM5Vy81YVpaNy9Id1JQbG1ZVTZwWFRSTHlJZzdqZCsxOWZKd1I3WDM3cQp3MG84dDA2RmhqbXJDemFZQ1Vqb1JlcURtSGFObVpOL2Rkdkc3alpXQnUrak5oMFlhdnN5UXlDSVZtdjZ5cVNjCmpQaUQ5dWl2eHFUd2pKaWRJQlJmdVVyejNhRVJRN2NRZ2YwcWhxakl6Zmx6SGJGS2hJTG9jQldxN3p5Tmw5aHIKdlVHVC9XWmN3MHQvT3RNNzJTUGFwbG1UZ1ZiYlFSeGYyVkh6eXB0R0l2dHlkbFhLOHRoeE9NcFhvNGUrU2w4ZAoxZ2RRY0M0b2lzTjlGMjlvTnM4UDV5RlFQLy94WXV2OEM2MDduQ2oxRHpySWQ1YXZHL05WZktCL2ZiREtFRmdOCjJXaEhJblR6UExFY2pGNGZFcmNVQUV1V1cwYnVYLzZGSENHM2lUdHJxeUQ5MktUVkRmTjFKNTZycmNzQ0F3RUEKQVFLQ0FnRUFrOHE4czRQcnZZYnk3OVVWbFdKTktxY2V5a3dCa3hFMWZqcllPUldRMmhpQWlyeEdWNSs4bERULwprNnVqbTFFV3diNUswSHh4UktrYitQRWExSHFOTkhFNkp4TnBKS0s5ZXhEbFlBUSt4N2RGQnFWci8ybmF6bW80Ck1COE1MWWxtSXp0V1dvU1l3ZThvMm1FZzRxK2J4WXM1SW1kdTdBa2hFN2RKNjNobTIzZ0xNZmVNTGFsUnFvcHUKWEJQd0U1blhQNmFHdVVOSHRHMUs4dFFKRGxaWStMRWJBZU9mUmVOUWhUOU5kUnVrWVNXNTc5dmZLYmxKclN2egp1bGc4OXNWbTNjV0VLNXBCNnJqOXdKYks5NHZvS2Z0VnFiYnVCd1dqZDFhOXBpYktod1ZCZTJMMkZXaHBTWmM1CkYvY29DN25qVGFZVDZ0cjkxeTVWaGhKaElaUUNmL3Z2NFpsNVhoRkhzNVZUWk5iTS9PZnF5RlFMWVhWSk80OEsKRjd0bWF6QUVRUUJRd1ZacUg5QzlOUWR6UEhXbWMzOE9raHRjMXd6YXFuL3JnOSsxc2dBTUQ4aFdDdFFKVWU5NwpiOXltaDVBMFo0UVhLcHlGVDBiK3BYY0QxalJoYTA3VXRrWCsvekxKOUhwQVhjVW16a0crajVDWE5wbnhzSXE1CmZKRmVxM2hCajl3Nm40aCs1ME00VzBGc2U1WW9FVXNjM0IwZno4QmxRQmIrWUpMRkxOSDM0TUg4cDFsMFpEWUoKeWFlMHBzeGxCaWpnNE9QWitXQ0JhK2p0Rlc0TGlXZ0VjeHdnejh3K2hFT0FRcjJhMURjN3c4amQrWTRJSzhVbQpsVFZzNWRicDRtT21QTWxSdi9HTTdrRHVkRnFiTWczWUZ3WGczUWJxdVZxTFp6RXpqVmtDZ2dFQkFQSktaYkNXCllmTGVqa1MvZmtSeVYzVkliNTRtS3dRSG9NV3ViODh0UGdHdVh6anNKeWQ1UVRRNThQcFVqWHJMSG1uOGxTMisKdmlFOEdKeWxLd04xeU1sWnc0MCtrWmhwSFVwQ1d4LzJaS2pBcXZxQTlPT0tvMmZ2NkhkL3dPQW5VNEN0aW9DMQpwcmk3bEtGWVhvUDhEdFFWd0hZdkl6Q1JxRG5oYzRtd0pEcXpUQzl4ZHVJK3N2eHpsNHhIODJmeDBqclBpRlkrCi93T2RYanlmSVBqeWhIQzRqUFRXYmFpcndYUzlkQmpTbDEyOGFJUlQ1ODAveVhFL1NZQXVnZzA1akt0ZzV6UUEKU28xM01UZXpYUkhYZE8wZGkzdEVNSEdSRUVrRnBlVm5uUFF2Q0NlZEswRFYzNmlOd2lXYzhwd2RmTE1WbmVUdApES3daZWRDeCtvLzdldjBDZ2dFQkFPdTQ4REdFSkpKekh4VlI1bVkxSzJBbFp5WXRwVE9XZWhLMXpYNzRKdk0zCll4TjRuZCtaeDVuOXVTUG1tS3pxRjNUVSs0NFJWdGRKSzZlam9GRThkTURUTldhU0xXL1pEbU4xblQwbmp2T24KSVdKbjU5eW5PQ2hXV0taZ1haLzlVcUdSN1B0Nk94U2trZXg5Yy9mWUJzTVgveHVzZFhRaWdlb2dsMGlPWVZGVwpnWElpaUxSTEhwSEpzSy91TnhJaXpqMGhUWVluN3VEN1BSRU53RlJjQ1lmOEoxZVVGYmQ2RHVDVldlUUNLV2dmCk5kMnRTV29pMFZ5bGo0dVVYOEl3MHRqTE5NRDVDUkVKRWs0R1N2NEVEU212VWR2MUxpQktKQ0wybEVjZ29QZUMKb09EMmlDYzVLcWdubVFyYVJpbEZGazhSVlhBOVBXWkdZM0MwYjZUVm1tY0NnZ0VBTlpPMkFPS0FMbENBYlR0YgpGSStrUDA4UlA0dDVINThBTWpac2l3ZWFHbzBRaVduUERxK0ZkNk1JWXBLbjVtdGNBbHZVTVJWb3ZiaW9TSnROCmM2cHNCL3BOZjhKQ044Mm1xSEViN1dseXdNNDZBTUxiWkNXWUZMZThWQkJ2K2lFNEdkQkdQRWZ1NGhLNHZ5VG4KWVpBdlJ6NjRIR280QWRsenRiamc3NlYvbld0Z2dXMDV1TFhjcG01NUtKQVFodisyV1VMakJ3OVBIT0dEb1N3ZgpBbTIrVTU2N3JMaHQ3MHByc1FEajEwbGFKMlF1U0hTMVlYR2xmZUZjdzNlRlVwOVROK0pwdmRvQ29sMmxDSWdsCklIamdaajZPUldmQ3Zwb3hXN1JnQnVadWtxQ0QwUjYwSGRZdGF2eE4zanRpZXBzYXBBODNweE8wSmFwTWdaV1oKcnBVUmtRS0NBUUJPY0V2OUxpdTlUL0dYOXBqa2llelZJWjBoWnk4QjY2RFRlUXZZcEZyUnRDeVQzaDhxdU5GaQp2THRPNXYwSERSNmhFZjVqV0FHOXdldDA3VTM3dWxKZmwraTlLUWRWb0xUWkE5bys3MXJ5V1RzU3MrREQzQ0VqCnl4ZlV4VnhpVUxtZWFpQ2h6aHE2MDhoN0dZUHRoVVU2eGxGdHRBV2hqNW9MZnF6WXlBZzZPTDc2YStOeG0wMmcKMWF5bDNtOFU2ZUFYRjIza3BvVW0rSE5wcVZuR3VKbXpWb1VBNzVZS1orTnJlRWRoU0JiZlB3TjlzSnd0WlVpbAp1N0g0a0hjTTk1SXg4ZXlzQ2pLcUtJcWV6QmxJVGJEVG5qTnZMamNiSjVDKzBhNmx2SVhUMXZRUjUvZUdsYzlNCkJXRTM2MHBOa1YvTEQ4bU9mOUplcGkyUTQzb0RMOUVoQW9JQkFRRFRXSW1meTBLOWdHekEyclB5MTY5bVdZUUsKT2xjbkQzK2hRcTZ4NTFabjFlL3RleEZlVmxoSG40cnJuUmRDRk9BcDQ3dUZrSjJtNzJHQ1ZENzRFd1F1Y0s5eQpBRDVqb3JxZ1ZIcUNLWmRrSGpiMlY2ME16bTZnM3J0TDlXSlhGVkx2TkJiL1FHQjJ2Z0hWT08wenFpcUdaajRlCkV4N2wybS8vNVNFNERMdG43MEo5Q2dHMUh0WENTOGRXckdQTDFwekRuazhWWHRub1h6YjBMQ2hMVUZFZ1pSbWgKY1Y2QUZIRUsySDh3Qkh2aU55ZWhzUlFpRGtsMkFpV09jSk52a3pXNjhjazJuSmpSV3lQWUsxSkwzTkNLcEIzUQpPb2hyUDBmSGNXQVhNVzk3d0ZYWmhSZm5RZkR4eElPbGozTWNZVDBBbGFuWGQwRjROR2MyTnZtcGh4MDQKLS0tLS1FTkQgUlNBIFBSSVZBVEUgS0VZLS0tLS0K
  HARBOR_ADMIN_PASSWORD: "SGFyYm9yMTIzNDU="
  POSTGRESQL_PASSWORD: "Y2hhbmdlaXQ="
  REGISTRY_CREDENTIAL_PASSWORD: "aGFyYm9yX3JlZ2lzdHJ5X3Bhc3N3b3Jk"
  CLAIR_DB_PASSWORD: "Y2hhbmdlaXQ="
  CSRF_KEY: "UzZ4bzQ2TkVyOWxTamhYUkVmOGRmOHlseFhkT1BOZDg="
---
# Source: harbor/templates/database/database-secret.yaml
apiVersion: v1
kind: Secret
metadata:
  name: "tanzu-harbor-harbor-database"
  labels:
    heritage: Helm
    release: tanzu-harbor
    chart: harbor
    app: "harbor"
type: Opaque
data:
  POSTGRES_PASSWORD: "Y2hhbmdlaXQ="
---
# Source: harbor/templates/ingress/secret.yaml
apiVersion: v1
kind: Secret
metadata:
  name: "tanzu-harbor-harbor-ingress"
  labels:
    heritage: Helm
    release: tanzu-harbor
    chart: harbor
    app: "harbor"
type: kubernetes.io/tls
data:
  tls.crt: "LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSURXakNDQWtLZ0F3SUJBZ0lRSG9vVU1lNEREaXloTWpYT3VrN1BXVEFOQmdrcWhraUc5dzBCQVFzRkFEQVUKTVJJd0VBWURWUVFERXdsb1lYSmliM0l0WTJFd0hoY05NakF3T0RFeU1EUXdOelUxV2hjTk1qRXdPREV5TURRdwpOelUxV2pBck1Ta3dKd1lEVlFRREV5Qm9ZWEppYjNJdVkyeDFjM1JsY2kweExuQnZZeTU1YjJkbGJtUnlZUzV0ClpUQ0NBU0l3RFFZSktvWklodmNOQVFFQkJRQURnZ0VQQURDQ0FRb0NnZ0VCQU90alZES0J5R3BpenZodjAwZG8KbkErem9oZEFFMTRnSndPTHc1SXVGUklkeDdRR00vdExLeXBNN2kwSlpKTmNsMlZ6OXk5bmNmL2pSQ0FDc3lUOQpNVnZPQUJQNWxFbkZhQTgzSEM5NkwrQTRoQldRditlSndzMk04UjQ0YzZlU1pWOW5YYmtJcjhXbFljOG8xdEJSCllEa1NiQ0xCZnNkUzBncysyKzN2S0NhWTZndVFNMVpaWE45NkRwWXlhSnArSlZzWVdBdHdwdE5RWGtDbUFXUlAKVVlYSS90TmNNWmhNMFJXSUlsU3VxT1F2eStTM09wNUVuQm4wYi8zMWxzakdILy9ZcWZKM2FBZG12dE9mbisxMAo0SzF6Qm9vUmN6bGxKRVpnZHFWOVZncjBPYUUxZ245ZkV2eUlyT2k4TTFuc1ZJNGp6Z2lHM3Ivbjd0MjZUV05UCkpCVUNBd0VBQWFPQmtEQ0JqVEFPQmdOVkhROEJBZjhFQkFNQ0JhQXdIUVlEVlIwbEJCWXdGQVlJS3dZQkJRVUgKQXdFR0NDc0dBUVVGQndNQ01Bd0dBMVVkRXdFQi93UUNNQUF3VGdZRFZSMFJCRWN3UllJZ2FHRnlZbTl5TG1OcwpkWE4wWlhJdE1TNXdiMk11ZVc5blpXNWtjbUV1YldXQ0lXNXZkSEpoY25rdVkyeDFjM1JsY2kweExuQnZZeTU1CmIyZGxibVJ5WVM1dFpUQU5CZ2txaGtpRzl3MEJBUXNGQUFPQ0FRRUFKYTNCaXVzMFhjMitjUTVLYUtjVWVTZ3kKeWN1YkZCeS9MMGV4UmRVMzdDS2p1Y3l4cElBSTQ3NDZseVEzR2c5cmh4REtmMmkrZXZ2QTBPd3dlVmdSOWQvcApsc1duVEkrUlpDVlphZFozaWJ4eERiUXdDOHZLNmV2a2F6dGZSek5IOU44ZEhKTUE4NDlRU3FabzNoamxaZWFsCnIvd0Zabis5TEZYaFVaNGZFdVBUY09GVElHN2N1UzF2VGl0R3g1TkxXMElRRVRMMG4zb2M0ZXNsY0NiRE5ZWEsKMXA5K0U0VExndU5XbThCUjZhZXVmZzloNzlWcThiSjUwakx4aVloZVcxU1AvamQxNUNyUEYwc04wQVdRbGdZbwpXdVlTbUdBemkxelEwaGd0T2MwRUUxd3d4UENXZ2VTTURQWXIrazQ1ZFNpbmxSZG9PM3ZQTVlGVWxkbjk1QT09Ci0tLS0tRU5EIENFUlRJRklDQVRFLS0tLS0K"
  tls.key: "LS0tLS1CRUdJTiBSU0EgUFJJVkFURSBLRVktLS0tLQpNSUlFb3dJQkFBS0NBUUVBNjJOVU1vSElhbUxPK0cvVFIyaWNEN09pRjBBVFhpQW5BNHZEa2k0VkVoM0h0QVl6Ciswc3JLa3p1TFFsa2sxeVhaWFAzTDJkeC8rTkVJQUt6SlAweFc4NEFFL21VU2NWb0R6Y2NMM292NERpRUZaQy8KNTRuQ3pZenhIamh6cDVKbFgyZGR1UWl2eGFWaHp5alcwRkZnT1JKc0lzRit4MUxTQ3o3YjdlOG9KcGpxQzVBegpWbGxjMzNvT2xqSm9tbjRsV3hoWUMzQ20wMUJlUUtZQlpFOVJoY2orMDF3eG1FelJGWWdpVks2bzVDL0w1TGM2Cm5rU2NHZlJ2L2ZXV3lNWWYvOWlwOG5kb0IyYSswNStmN1hUZ3JYTUdpaEZ6T1dVa1JtQjJwWDFXQ3ZRNW9UV0MKZjE4Uy9JaXM2THd6V2V4VWppUE9DSWJlditmdTNicE5ZMU1rRlFJREFRQUJBb0lCQUV2aWtkcFdqTTMvWE1vcgpBdW9haDNWb2EvRWk3eHVCTWhLcWxEb2tNUmJPRXZ1dXBFTjNVRXNxMGY0aThSR3czLzROREx0emxnVHd0NTI2ClFSYkRxWTMzTTM4OUR0bFprdHFVNGJsTW92S2VSYmJPRzVBQmtaUEN4RmtCeWdkVDR1cUc0R2d1ckx3RFBTMFQKOVd6alR5b1hEbFdHRytFV2lqQ2w2ekVoME1mZ0ZmamZHU2F5MVdvcmM2ZldqSW5icWhvOWdtN25jdVU2Y0hJMApzTEs1dzZqVFY0MGNrVGs5R05pYXFzdXN5Vm9qalYybGRzYmFkOUhZR2lHdHVtUjZpWk85M29sMnpjc3FGQUk5CmhaT3JyQlpJNWpwREhCcXRJY2lHZXo3UkwwTzNBWEtESFJqVHArWjVHdlN6WmZVR3BKK1JySmxJZEZmamVTaFAKLzdiY1FXRUNnWUVBN2ViZk5laVoyYWVEd1djQThYem8yazV2M2w4WWh6d0VnN0ZTZHd4bVdIYWEwaGRMR3FHTgowRy9hNGxuQUZxdmFPK25tbzBvK3ZkUU9ubnJwVXJKYm5iSTRheUVHbUw5a3ZmTlhBZjF4VlVHdEZkOGo5WUk3Ckkva1VnWjlIOUNaRTQyN3NtQnVRNk9NTmR2b3hmNENsM2xWNDNtU3NMd1YreEpIMCt1UDhnQThDZ1lFQS9VdUEKQTZpN1pEeUI2VTJ6VFczd0t4WkNXU1d1ZUFpOWZNVDNCL25DSDFFQ2pPTDc0YTFqWUNkdGJVU2JKZHlzVXN6dQpaSlIzNEtUa20yYlhsUC8yL1FxT0YxL2VEK2xuSFZKendSd2FiSG5Fb0JQOG9lWDN2R0ZienZaYTBsK0ZHN281Ci9oM1BnMENJZVNJSWZVVXo3WGg0WWkzVFdTbXhMSHJFN3llcHRac0NnWUJuMTBSS3haS1IvSnA0Q3J2UXJKTCsKNXduUmFIVE9ZcFlkM1lKL1VEeEVGTkVUTHZPclZpVU9mQ1J3ZEhoeDdPVS9EYU9NVnRYNENkMnZzenF3ekFWTgpXZ05pVDNJUHJrc00xbkI5LytBK05JS1diMlhFdmVtT2xDUXRTQmNpTEtvWkU4dlZ3UUtKaE1IVjB2TlVFaFZVCmJMNXJaRW43NUV3bkJRYUhsSWdjWlFLQmdRRGNOaFNRbWRSNU84V3lJTlJlMzlLcWt3cVIySm5MVDhYMXdJUUkKVWhKOENZRVBIWlBneTA2WFhRL2NySVc2TUJVOVUxOTY0RDBzZUE4c01BZ0RTVm5nK3BrNEp5ZTNhN016SWVqegpIY3kzUEZJKzNjR0l1NWRiRnNXcnREQ1hyMlhaQ2xtNjNRMzVUVlNaQTRhZjZsZFFBS21ncWJpU1R4WHkxclY2Ck9tQm9Pd0tCZ0VLYWJhdnJHcTV1ZnhSdDFjUzdKcExKdzM3UVNtSk40RzI1VlNVQ3k1aEN3c3V0MXp3eUo2MzcKVUl0RDN5R0RGRWZmaHpBVGVxbmMxSWR1Z043cmhVVHlycndNSnd2aVhpMXpkNUU3VGxYRVFHOVlCM01HSEFxSwpFSUdVNEVpWFdOWU81OUQ4VGJ3YmlhdG1paDFuUnFBdFN5UmRtQVA2WkpxYXc1eEZYR0JqCi0tLS0tRU5EIFJTQSBQUklWQVRFIEtFWS0tLS0tCg=="
  ca.crt: "LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSUM5VENDQWQyZ0F3SUJBZ0lSQU8vTGZTOUVPU1p3aExobnFoRGI5T293RFFZSktvWklodmNOQVFFTEJRQXcKRkRFU01CQUdBMVVFQXhNSmFHRnlZbTl5TFdOaE1CNFhEVEl3TURneE1qQTBNRGMxTlZvWERUSXhNRGd4TWpBMApNRGMxTlZvd0ZERVNNQkFHQTFVRUF4TUphR0Z5WW05eUxXTmhNSUlCSWpBTkJna3Foa2lHOXcwQkFRRUZBQU9DCkFROEFNSUlCQ2dLQ0FRRUF2OXpHUFl4dFBGNDhQYm1MZjNPVEFHeVhMYnhrZkdLVXZkWTA4RStMdzFQQ2U1SW4KSC9DSXl3QjZTQlFaZWJTVmlUSnZIS1lTSWZPRWJpWkt2c3Q5WmhEWDc1MlNId2UxaUNEZTF3M0pWbEdORnBLcQpIdGZzREk0elhVVG43Ym9IU0tRQkNJQ2o0OGdjVnhtOFVTS3YwSndhSndmblpNRy96MU1jdVpqd0hhb1dYYlpJCkFrTU0rejZTd25CWXE2M2pJOThGcWl2RzcvdmtoYzJBaitKa2dab1ZEbUo5OGU3bllWa3RPZjdXd01IZjF1OXUKd2hnNlo2ZzliaW5wNE9BVmhVY3pjS3pZWDhjTzVGaVJqd0xwRVROOTJiYlA3VnhFNFdJWE54OEN2VFYxYSs2WQpiSENBU2J1UmVkZXFnMmhVWWdXU0ZWdDNLU0ppSE4rSE9paFQxUUlEQVFBQm8wSXdRREFPQmdOVkhROEJBZjhFCkJBTUNBcVF3SFFZRFZSMGxCQll3RkFZSUt3WUJCUVVIQXdFR0NDc0dBUVVGQndNQ01BOEdBMVVkRXdFQi93UUYKTUFNQkFmOHdEUVlKS29aSWh2Y05BUUVMQlFBRGdnRUJBQWdKSnlDeGtkN0Z4RC9sZzgxVEQzZjBnT21DUGNjNQp0dTVGdWlacEhVUTUwVkxjK3Rvd1lKdjl0VUV4ajZJL2VhQmZZNTQ2OVhmbzQ5bXNPWWRNd2ZPUlh1RVBxbU1YClYzQXQ5bndQbEwwTmowQW00NkhHVGxDQ3JMREdBdWxTV25zck11dndGeDc5M2FyRVpacW5NQjhFS2Z0N3J2clcKaFRXZkVFbUF2b2k3RW9vVThURUM4YUJKbzRWdFZTZDdteU5xQlYzYVk2UlhMYkNuSUJ4emtIcnVhRXZMSW1odApSenRXQ09oa2hWS3lzYmRPRGtiaXJKeDdmU3BDVEtTMFh6bU5DdW9qSEk3YkROVlh3QTFZb1pXMGRkYzVBTWZ5CkliS3BkSncxbkN3aGhLcjNNcFJFbzlWTEQzWTNqbkpiSW9iem9GdFBDb280anV4c1JwZkxVMkE9Ci0tLS0tRU5EIENFUlRJRklDQVRFLS0tLS0K"
---
# Source: harbor/templates/jobservice/jobservice-secrets.yaml
apiVersion: v1
kind: Secret
metadata:
  name: "tanzu-harbor-harbor-jobservice"
  labels:
    heritage: Helm
    release: tanzu-harbor
    chart: harbor
    app: "harbor"
type: Opaque
data:
  JOBSERVICE_SECRET: "d00yZTExaGIxMTdmWEZSVQ=="
  REGISTRY_CREDENTIAL_PASSWORD: "aGFyYm9yX3JlZ2lzdHJ5X3Bhc3N3b3Jk"
---
# Source: harbor/templates/notary/notary-secret.yaml
apiVersion: v1
kind: Secret
metadata:
  name: tanzu-harbor-harbor-notary-server
  labels:
    heritage: Helm
    release: tanzu-harbor
    chart: harbor
    app: "harbor"
    component: notary
type: Opaque
data:
  ca.crt: "LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSURBakNDQWVxZ0F3SUJBZ0lRS3dibk54T3h4S2hYUTNOWEwycmFYREFOQmdrcWhraUc5dzBCQVFzRkFEQWIKTVJrd0Z3WURWUVFERXhCb1lYSmliM0l0Ym05MFlYSjVMV05oTUI0WERUSXdNRGd4TWpBME1EYzFORm9YRFRJeApNRGd4TWpBME1EYzFORm93R3pFWk1CY0dBMVVFQXhNUWFHRnlZbTl5TFc1dmRHRnllUzFqWVRDQ0FTSXdEUVlKCktvWklodmNOQVFFQkJRQURnZ0VQQURDQ0FRb0NnZ0VCQUpOVjJVMU1MZThwZmF4bmk1YVJUaGN0enE5Rk9hZjkKS3AxK2p0bWd3eUR2bFk0ODhWb3ZJZ0FlcEJYQUhLYUVSUy9FWWw5Q2JoMXpIS284bVNiZzI1dm9jbW9QU3p1UQovZVpxRWY4dmFrSmxVOXNac3Yxb2ZXNDJZVjk5a3NPb3BEb0R4ZUVKc3VhRjJ3RTZMSTdLM3FrdzRHVlZSdmxZClF4dGVBbllkOXpuNWxndkM5ZW10d2tBbURlM1o4U0hzc2NtZzBWSFpmVytra1FvbS9PWnhsL05ibFF2V0NkeGYKVWYyZUVacjZVOTE4UC9YQW8ybWVWUG82SjdlQkNHUFpnbzZrQStRWGVmcDFQVUxoa0ZmT0Q5cDBEajIxU2xGawp3T0RxYzByUkowS3p6UTI5Y21QTDVUK05RSXFQN2J4NkszcU81MStvdzEyUThNRGpMcWJoUGVrQ0F3RUFBYU5DCk1FQXdEZ1lEVlIwUEFRSC9CQVFEQWdLa01CMEdBMVVkSlFRV01CUUdDQ3NHQVFVRkJ3TUJCZ2dyQmdFRkJRY0QKQWpBUEJnTlZIUk1CQWY4RUJUQURBUUgvTUEwR0NTcUdTSWIzRFFFQkN3VUFBNElCQVFCdk9BL01NQ1NxdzgrcwpTcTJkNmVZM1IvYkUvZjVROFAvUUcxV2pWT1ZYVVJydHV0UVU3Y0RqTm1KLzFDd0pQSmhHSVJXaFp2aFBNcmYvCjNXUWdWR3pNWWZmWGYyZlpwaHVPNlJRWDNlczBEdmtvSDBoL1FGMm8wSkNWWStIOVFxRkE1T01hUzZGUFBSRloKZGM4K2VGaVRJcnIrQ0pBSFN3em12OVQvc2VmdDd2dFU3R0xodDR5STdTYmdnWUUrQUxwK0hVTXl1SGlqc2FZLwpwa1YvSU9ndERURkFpR2lxd0h3YkwrUSsyZzc3djVpRzhjUXZaYjEyOFBGK1I5ZUNnVlhic25TbThmMXNveGh4CjgxQTNmS2xmRTBLZm1LdzYzNUF4QlNaa1JyOTdvUEdSVmluaFhreUdibzgzNUU5K2QxZ1lXWlVvclB3MlVNT0UKZ0txVWtqT1QKLS0tLS1FTkQgQ0VSVElGSUNBVEUtLS0tLQo="
  tls.crt: "LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSURFVENDQWZtZ0F3SUJBZ0lSQVBaUnhMQTIvbitXNDBiUFlHd04xWTh3RFFZSktvWklodmNOQVFFTEJRQXcKR3pFWk1CY0dBMVVFQXhNUWFHRnlZbTl5TFc1dmRHRnllUzFqWVRBZUZ3MHlNREE0TVRJd05EQTNOVFJhRncweQpNVEE0TVRJd05EQTNOVFJhTUN3eEtqQW9CZ05WQkFNVElYUmhibnAxTFdoaGNtSnZjaTFvWVhKaWIzSXRibTkwCllYSjVMWE5wWjI1bGNqQ0NBU0l3RFFZSktvWklodmNOQVFFQkJRQURnZ0VQQURDQ0FRb0NnZ0VCQU5wMElaVHYKem5TcTNmOUhmeTZqR2FVMlF5Qjl5VkI3OGNhSnd4OHAxUnpWNGtRSGxDUWFMS0ozcGlyaE5JNUcwRitOR2w5LwpsY1pVU1ZKS2N4Y2pHZlFWaDA2L2F6TGFLTTNadWNzSWZ0YVZWYW0rTm1WTDJ4K1VxSG5hQ0FwUGUzWFYzVWhVCno1L2tqR1lGbzZvRnlkckZ1NnZuTlZ3RlQxZThqQmltY2h0cTZnbnhndURzY0c0TUpNbTFMTXdBQkVOblhCS2gKakRWaU5zVWVwRHdXcUlJZFRjd0F4YXNSV1BZZHhMOFVsWDVGU1gwcUJ4dW8yYzhkaEEwZGhoOXFib2JKUkRsTgpwWTVPdElOVURObnNFTTZJOEVzVHM0RlBmaCs1WUk5NlJoQm1oVDJjTnQyV1lPNzcxZmpVNXRadG04U2lwQVZVCm5RSVMyck5QWmtxTUNtc0NBd0VBQWFNL01EMHdEZ1lEVlIwUEFRSC9CQVFEQWdXZ01CMEdBMVVkSlFRV01CUUcKQ0NzR0FRVUZCd01CQmdnckJnRUZCUWNEQWpBTUJnTlZIUk1CQWY4RUFqQUFNQTBHQ1NxR1NJYjNEUUVCQ3dVQQpBNElCQVFBL2FzWDB4blVZSnlPN1dDU2dOcmZHZSsyOGJUQXF5OTkyVjN6dGFhOVF2eWxSdiszYzN4TkxTUXpRClZDWDhNR1I3M3Q1VzlNRW4zZUFMeWlQOHhrSWh5THQrUWdnbnBrUGtOSWk1VklST0k3WmM2MWtvbGk1YUdndmwKZXJXUFBEendaQVN6VlJRK0c2UlNYT3NkckJBSi83QS9VTXM1N3J3OEphZit2U2ZSNUFUbUxqTzFrd1QxTnpJQwpGV1g0RC90Y0Z4WUc2SE1TNCtIV1ViZmxhVXMweXdodjR6SGFIMEpWcnNyWjFiRVZLd0JkRXFuaWg4QzNKNWx4CnJIclhHeXZaeVV2a1BMY0svVTgvUXUyRm9BNU5tWTJ6RnhJaEpJeHJkM2xHMVFkdlZMMjNGbUMya0RaaG93dG4KMkZ6dSsvMitSTElPWUdjV1JmcWd6ZURMOVNoWAotLS0tLUVORCBDRVJUSUZJQ0FURS0tLS0tCg=="
  tls.key: "LS0tLS1CRUdJTiBSU0EgUFJJVkFURSBLRVktLS0tLQpNSUlFcEFJQkFBS0NBUUVBMm5RaGxPL09kS3JkLzBkL0xxTVpwVFpESUgzSlVIdnh4b25ESHluVkhOWGlSQWVVCkpCb3NvbmVtS3VFMGprYlFYNDBhWDMrVnhsUkpVa3B6RnlNWjlCV0hUcjlyTXRvb3pkbTV5d2grMXBWVnFiNDIKWlV2Ykg1U29lZG9JQ2s5N2RkWGRTRlRQbitTTVpnV2pxZ1hKMnNXN3ErYzFYQVZQVjd5TUdLWnlHMnJxQ2ZHQwo0T3h3Ymd3a3liVXN6QUFFUTJkY0VxR01OV0kyeFI2a1BCYW9naDFOekFERnF4Rlk5aDNFdnhTVmZrVkpmU29ICkc2alp6eDJFRFIyR0gycHVoc2xFT1UybGprNjBnMVFNMmV3UXpvandTeE96Z1U5K0g3bGdqM3BHRUdhRlBadzIKM1paZzd2dlYrTlRtMW0yYnhLS2tCVlNkQWhMYXMwOW1Tb3dLYXdJREFRQUJBb0lCQUNvTXBwWXJudHI0Tk9rNQprdktnTklTSHNGNGx1RVdFeGlKSVRFWElZSncvVTJGeThBSVBBNzUyTjRjVGVIRldraStDVXF4Rk84aEVXeVM2CjdmSnJNRWk2aUNRUlZvb2dVakJsazR6UVl0SGRSdkw0aVRId2F3cG1MQlBnY3lIQThPdmFzZENGZXIyMVdZMGQKMHNZY2ZTRmVaR1NQaWNiZndza0pveEh2b0JGRXBTS28vN2M2dFNiL3pFdWx2djg3R09XSUZlOTVHSjdhQjlMdQo2dCtqb1RWb0dENElmSFVoNlZTdGxDdVdEdFZuZlBwcWlRcTdySUlqV1BON3JraWlxaGtZNnkwVzFOM3YwUTdDCmpUYkJ4bTFqRGMyczc4ZXp2WmdxVWRLTTZHU2lSV0VvMU52YkpEQUJWNCtWN2ZWRDRlRmc2a0pGM2tVbDlqRC8KdEtrang3a0NnWUVBNmtra09sRktoYjZUazZMR2pJUnlTak9KS09GOVFCL0tYOFlzMzMyOCtXbUkwcGdmMHpBVApCMWZuWHhMdFJ1UXBOanBURm4vdThPMWhFdm9Ca0p5Q0Mrek1UdXM0dzFYRlNHYmxwZDhzc0xVc3ZyaCtDbG52CkV4dTR2QVZuSE9ncVNLVEd5dmJwSlVZU2xWNElWb1JHSXJrODRxbEk5QkpSWU1vb3h3Y21KMDBDZ1lFQTdyTlkKUG8xRkZtSURMeitHMm5YN2w1ZFlya3pTT3F4N0hIQzJ3bkJwOFNaa3dpK2ZZODVVbmVpcm9uZkZtMGZ2Z04zOQo1TXJLeWZBMVNWZ0RMNFlEZ0o3QnQyNDUyK1RmdXRaZHpZa2E5SS9EQkJTYjdCRnpCVjVQTi9rTFNjSHNYS3dHCjREcUhVd094VUFJK2ozd2s3dWNZejNyWkk0eGY4SkVFNXN6Z1RKY0NnWUFGdUVOcUtSSG9zZjVvWEZEOG5UOHQKRUpVSXFuaWtXQ0pZdEQza051Mm1LUzF0OXNqUUh4eFgwWTJVaEtIR1dVdW9SMFJBQ0YrTkFqNmNkLzRSeWNCagpDaVR5eUV0YWVYMlhodXVVWVI1Mk1mWWxzZHRoNVZBdzV6eGJXc1pwcmtGYUJLdlZ5TEZvZDQxOG1BOGNEWjZvCnVsMENLNS9jVlpZbkJzaDRFM1NiQVFLQmdRQ2pWUHpROElHUnEwZGFrVEdKVXFueE5KSnQwZ3NZTXVXYXRGV1oKL3FtL1pQSVZIZGtHeGl5SVVLa0E1c3ZFVVJqRktTR042R1dTZ0ZjMTlJOVplVzMwR0syZEFrTjgvOE5IYVYrTwpRSDY5VVpHenZSWmtGaHlLVTlvSkJ0UitoNzlnT2lZS1VJSkFmNHBZb1BDRjVnQ3ZxRm9GdnAzT0FVTzByTWFaCjF4Nnp5UUtCZ1FDbkFXSUY1QTBncDVxTGs3anNSQWhIQURFQ1dPZ25oRHZzeXpaYktIaFRCbkNQR0I5RnhtQU0KNHpnMWQwSWZxS1VLZW1SMEpNUzVidjFiSXArcEFyVE10Z1lQSUNDcEJlMzUwMVhJWFdDUDNMNUZ2Q1Z1UEo3eApadnNQNU9yYW53eGI4aXY1Y00rOEpXN1k4TGRoQ1E5djFiNTN6SzV1akFwTUwxWWJqKzhnNHc9PQotLS0tLUVORCBSU0EgUFJJVkFURSBLRVktLS0tLQo="
  server.json: ewogICJzZXJ2ZXIiOiB7CiAgICAiaHR0cF9hZGRyIjogIjo0NDQzIgogIH0sCiAgInRydXN0X3NlcnZpY2UiOiB7CiAgICAidHlwZSI6ICJyZW1vdGUiLAogICAgImhvc3RuYW1lIjogInRhbnp1LWhhcmJvci1oYXJib3Itbm90YXJ5LXNpZ25lciIsCiAgICAicG9ydCI6ICI3ODk5IiwKICAgICJ0bHNfY2FfZmlsZSI6ICIvZXRjL3NzbC9ub3RhcnkvY2EuY3J0IiwKICAgICJrZXlfYWxnb3JpdGhtIjogImVjZHNhIgogIH0sCiAgImxvZ2dpbmciOiB7CiAgICAibGV2ZWwiOiAiaW5mbyIKICB9LAogICJzdG9yYWdlIjogewogICAgImJhY2tlbmQiOiAicG9zdGdyZXMiLAogICAgImRiX3VybCI6ICJwb3N0Z3JlczovL3Bvc3RncmVzOmNoYW5nZWl0QHRhbnp1LWhhcmJvci1oYXJib3ItZGF0YWJhc2U6NTQzMi9ub3RhcnlzZXJ2ZXI/c3NsbW9kZT1kaXNhYmxlIgogIH0sCiAgImF1dGgiOiB7CiAgICAidHlwZSI6ICJ0b2tlbiIsCiAgICAib3B0aW9ucyI6IHsKICAgICAgInJlYWxtIjogImh0dHBzOi8vaGFyYm9yLmNsdXN0ZXItMS5wb2MueW9nZW5kcmEubWUvc2VydmljZS90b2tlbiIsCiAgICAgICJzZXJ2aWNlIjogImhhcmJvci1ub3RhcnkiLAogICAgICAiaXNzdWVyIjogImhhcmJvci10b2tlbi1pc3N1ZXIiLAogICAgICAicm9vdGNlcnRidW5kbGUiOiAiL3Jvb3QuY3J0IgogICAgfQogIH0KfQ==
  signer.json: ewogICJzZXJ2ZXIiOiB7CiAgICAiZ3JwY19hZGRyIjogIjo3ODk5IiwKICAgICJ0bHNfY2VydF9maWxlIjogIi9ldGMvc3NsL25vdGFyeS90bHMuY3J0IiwKICAgICJ0bHNfa2V5X2ZpbGUiOiAiL2V0Yy9zc2wvbm90YXJ5L3Rscy5rZXkiCiAgfSwKICAibG9nZ2luZyI6IHsKICAgICJsZXZlbCI6ICJpbmZvIgogIH0sCiAgInN0b3JhZ2UiOiB7CiAgICAiYmFja2VuZCI6ICJwb3N0Z3JlcyIsCiAgICAiZGJfdXJsIjogInBvc3RncmVzOi8vcG9zdGdyZXM6Y2hhbmdlaXRAdGFuenUtaGFyYm9yLWhhcmJvci1kYXRhYmFzZTo1NDMyL25vdGFyeXNpZ25lcj9zc2xtb2RlPWRpc2FibGUiLAogICAgImRlZmF1bHRfYWxpYXMiOiAiZGVmYXVsdGFsaWFzIgogIH0KfQ==
---
# Source: harbor/templates/registry/registry-secret.yaml
apiVersion: v1
kind: Secret
metadata:
  name: "tanzu-harbor-harbor-registry"
  labels:
    heritage: Helm
    release: tanzu-harbor
    chart: harbor
    app: "harbor"
type: Opaque
data:
  REGISTRY_HTPASSWD: "aGFyYm9yX3JlZ2lzdHJ5X3VzZXI6JDJ5JDEwJDlMNFRjMERKYkZGTUI2UmRTQ3Vuck9wVEhkd2hpZDRrdEJKbUxEMDBiWWdxa2tHT3ZsbDNt"
  REGISTRY_HTTP_SECRET: "eHRqTkNOQUJMc0V6TmFBMg=="
  REGISTRY_REDIS_PASSWORD: ""
---
# Source: harbor/templates/trivy/trivy-secret.yaml
apiVersion: v1
kind: Secret
metadata:
  name: tanzu-harbor-harbor-trivy
  labels:
    heritage: Helm
    release: tanzu-harbor
    chart: harbor
    app: "harbor"
type: Opaque
data:
  redisURL: cmVkaXM6Ly90YW56dS1oYXJib3ItaGFyYm9yLXJlZGlzOjYzNzkvNQ==
  gitHubToken: ""
---
# Source: harbor/templates/chartmuseum/chartmuseum-cm.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: "tanzu-harbor-harbor-chartmuseum"
  labels:
    heritage: Helm
    release: tanzu-harbor
    chart: harbor
    app: "harbor"
data:
  PORT: "9999"
  CACHE: "redis"
  CACHE_REDIS_ADDR: "tanzu-harbor-harbor-redis:6379"
  CACHE_REDIS_DB: "3"
  BASIC_AUTH_USER: "chart_controller"
  DEPTH: "1"
  DEBUG: "false"
  LOG_JSON: "true"
  DISABLE_METRICS: "false"
  DISABLE_API: "false"
  DISABLE_STATEFILES: "false"
  ALLOW_OVERWRITE: "true"
  AUTH_ANONYMOUS_GET: "false"
  CONTEXT_PATH: ""
  INDEX_LIMIT: "0"
  MAX_STORAGE_OBJECTS: "0"
  MAX_UPLOAD_SIZE: "20971520"
  CHART_POST_FORM_FIELD_NAME: "chart"
  PROV_POST_FORM_FIELD_NAME: "prov"
  STORAGE: "local"
  STORAGE_LOCAL_ROOTDIR: "/chart_storage"
---
# Source: harbor/templates/core/core-cm.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: tanzu-harbor-harbor-core
  labels:
    heritage: Helm
    release: tanzu-harbor
    chart: harbor
    app: "harbor"
data:
  app.conf: |+
    appname = Harbor
    runmode = dev
    enablegzip = true

    [dev]
    httpport = 8080
  DATABASE_TYPE: "postgresql"
  POSTGRESQL_HOST: "tanzu-harbor-harbor-database"
  POSTGRESQL_PORT: "5432"
  POSTGRESQL_USERNAME: "postgres"
  POSTGRESQL_DATABASE: "registry"
  POSTGRESQL_SSLMODE: "disable"
  POSTGRESQL_MAX_IDLE_CONNS: "50"
  POSTGRESQL_MAX_OPEN_CONNS: "1000"
  EXT_ENDPOINT: "https://harbor.cluster-1.poc.yogendra.me"
  CORE_URL: "http://tanzu-harbor-harbor-core:80"
  JOBSERVICE_URL: "http://tanzu-harbor-harbor-jobservice"
  REGISTRY_URL: "http://tanzu-harbor-harbor-registry:5000"
  TOKEN_SERVICE_URL: "http://tanzu-harbor-harbor-core:80/service/token"
  WITH_NOTARY: "true"
  NOTARY_URL: "http://tanzu-harbor-harbor-notary-server:4443"
  CFG_EXPIRATION: "5"
  ADMIRAL_URL: "NA"
  WITH_CLAIR: "true"
  CLAIR_DB_HOST: "tanzu-harbor-harbor-database"
  CLAIR_DB_PORT: "5432"
  CLAIR_DB_USERNAME: "postgres"
  CLAIR_DB: "postgres"
  CLAIR_DB_SSLMODE: "disable"
  CLAIR_URL: "http://tanzu-harbor-harbor-clair:6060"
  CLAIR_ADAPTER_URL: "http://tanzu-harbor-harbor-clair:8080"
  WITH_TRIVY: "true"
  TRIVY_ADAPTER_URL: "http://tanzu-harbor-harbor-trivy:8080"
  REGISTRY_STORAGE_PROVIDER_NAME: "filesystem"
  WITH_CHARTMUSEUM: "true"
  CHART_REPOSITORY_URL: "http://tanzu-harbor-harbor-chartmuseum"
  LOG_LEVEL: "info"
  CONFIG_PATH: "/etc/core/app.conf"
  SYNC_REGISTRY: "false"
  CHART_CACHE_DRIVER: "redis"
  _REDIS_URL: "tanzu-harbor-harbor-redis:6379,100,"
  _REDIS_URL_REG: "redis://tanzu-harbor-harbor-redis:6379/2"
  PORTAL_URL: "http://tanzu-harbor-harbor-portal"
  REGISTRY_CONTROLLER_URL: "http://tanzu-harbor-harbor-registry:8080"
  REGISTRY_CREDENTIAL_USERNAME: "harbor_registry_user"
  HTTP_PROXY: ""
  HTTPS_PROXY: ""
  NO_PROXY: "tanzu-harbor-harbor-core,tanzu-harbor-harbor-jobservice,tanzu-harbor-harbor-database,tanzu-harbor-harbor-chartmuseum,tanzu-harbor-harbor-clair,tanzu-harbor-harbor-notary-server,tanzu-harbor-harbor-notary-signer,tanzu-harbor-harbor-registry,tanzu-harbor-harbor-portal,tanzu-harbor-harbor-trivy,127.0.0.1,localhost,.local,.internal"
---
# Source: harbor/templates/jobservice/jobservice-cm-env.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: "tanzu-harbor-harbor-jobservice-env"
  labels:
    heritage: Helm
    release: tanzu-harbor
    chart: harbor
    app: "harbor"
data:
  CORE_URL: "http://tanzu-harbor-harbor-core:80"
  TOKEN_SERVICE_URL: "http://tanzu-harbor-harbor-core:80/service/token"
  REGISTRY_URL: "http://tanzu-harbor-harbor-registry:5000"
  REGISTRY_CONTROLLER_URL: "http://tanzu-harbor-harbor-registry:8080"
  REGISTRY_CREDENTIAL_USERNAME: "harbor_registry_user"
  HTTP_PROXY: ""
  HTTPS_PROXY: ""
  NO_PROXY: "tanzu-harbor-harbor-core,tanzu-harbor-harbor-jobservice,tanzu-harbor-harbor-database,tanzu-harbor-harbor-chartmuseum,tanzu-harbor-harbor-clair,tanzu-harbor-harbor-notary-server,tanzu-harbor-harbor-notary-signer,tanzu-harbor-harbor-registry,tanzu-harbor-harbor-portal,tanzu-harbor-harbor-trivy,127.0.0.1,localhost,.local,.internal"
---
# Source: harbor/templates/jobservice/jobservice-cm.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: "tanzu-harbor-harbor-jobservice"
  labels:
    heritage: Helm
    release: tanzu-harbor
    chart: harbor
    app: "harbor"
data:
  config.yml: |+
    #Server listening port
    protocol: "http"
    port: 8080
    worker_pool:
      workers: 10
      backend: "redis"
      redis_pool:
        redis_url: "tanzu-harbor-harbor-redis:6379/1"
        namespace: "harbor_job_service_namespace"
    job_loggers:
      - name: "FILE"
        level: INFO
        settings: # Customized settings of logger
          base_dir: "/var/log/jobs"
        sweeper:
          duration: 14 #days
          settings: # Customized settings of sweeper
            work_dir: "/var/log/jobs"
    #Loggers for the job service
    loggers:
      - name: "STD_OUTPUT"
        level: INFO
---
# Source: harbor/templates/portal/comfigmap.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: "tanzu-harbor-harbor-portal"
  labels:
    heritage: Helm
    release: tanzu-harbor
    chart: harbor
    app: "harbor"
data:
  nginx.conf: |+
    worker_processes auto;
    pid /tmp/nginx.pid;
    events {
        worker_connections  1024;
    }
    http {
        client_body_temp_path /tmp/client_body_temp;
        proxy_temp_path /tmp/proxy_temp;
        fastcgi_temp_path /tmp/fastcgi_temp;
        uwsgi_temp_path /tmp/uwsgi_temp;
        scgi_temp_path /tmp/scgi_temp;
        server {
            listen 8080;
            server_name  localhost;
            root   /usr/share/nginx/html;
            index  index.html index.htm;
            include /etc/nginx/mime.types;
            gzip on;
            gzip_min_length 1000;
            gzip_proxied expired no-cache no-store private auth;
            gzip_types text/plain text/css application/json application/javascript application/x-javascript text/xml application/xml application/xml+rss text/javascript;
            location / {
                try_files $uri $uri/ /index.html;
            }
            location = /index.html {
                add_header Cache-Control "no-store, no-cache, must-revalidate";
            }
        }
    }
---
# Source: harbor/templates/registry/registry-cm.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: "tanzu-harbor-harbor-registry"
  labels:
    heritage: Helm
    release: tanzu-harbor
    chart: harbor
    app: "harbor"
data:
  config.yml: |+
    version: 0.1
    log:
      level: info
      fields:
        service: registry
    storage:
      filesystem:
        rootdirectory: /storage
      cache:
        layerinfo: redis
      maintenance:
        uploadpurging:
          enabled: false
      delete:
        enabled: true
      redirect:
        disable: false
    redis:
      addr: "tanzu-harbor-harbor-redis:6379"
      db: 2
    http:
      addr: :5000
      relativeurls: false
      # set via environment variable
      # secret: placeholder
      debug:
        addr: localhost:5001
    auth:
      htpasswd:
        realm: harbor-registry-basic-realm
        path: /etc/registry/passwd
    validation:
      disabled: true
  ctl-config.yml: |+
    ---
    protocol: "http"
    port: 8080
    log_level: info
---
# Source: harbor/templates/chartmuseum/chartmuseum-pvc.yaml
kind: PersistentVolumeClaim
apiVersion: v1
metadata:
  name: tanzu-harbor-harbor-chartmuseum
  annotations:
    helm.sh/resource-policy: keep
  labels:
    heritage: Helm
    release: tanzu-harbor
    chart: harbor
    app: "harbor"
    component: chartmuseum
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 5Gi
---
# Source: harbor/templates/jobservice/jobservice-pvc.yaml
kind: PersistentVolumeClaim
apiVersion: v1
metadata:
  name: tanzu-harbor-harbor-jobservice
  annotations:
    helm.sh/resource-policy: keep
  labels:
    heritage: Helm
    release: tanzu-harbor
    chart: harbor
    app: "harbor"
    component: jobservice
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 1Gi
---
# Source: harbor/templates/registry/registry-pvc.yaml
kind: PersistentVolumeClaim
apiVersion: v1
metadata:
  name: tanzu-harbor-harbor-registry
  annotations:
    helm.sh/resource-policy: keep
  labels:
    heritage: Helm
    release: tanzu-harbor
    chart: harbor
    app: "harbor"
    component: registry
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 5Gi
---
# Source: harbor/templates/chartmuseum/chartmuseum-svc.yaml
apiVersion: v1
kind: Service
metadata:
  name: "tanzu-harbor-harbor-chartmuseum"
  labels:
    heritage: Helm
    release: tanzu-harbor
    chart: harbor
    app: "harbor"
spec:
  ports:
    - port: 80
      targetPort: 9999
  selector:
    release: tanzu-harbor
    app: "harbor"
    component: chartmuseum
---
# Source: harbor/templates/clair/clair-svc.yaml
apiVersion: v1
kind: Service
metadata:
  name: "tanzu-harbor-harbor-clair"
  labels:
    heritage: Helm
    release: tanzu-harbor
    chart: harbor
    app: "harbor"
spec:
  ports:
    - name: adapter
      port: 8080
  selector:
    release: tanzu-harbor
    app: "harbor"
    component: clair
---
# Source: harbor/templates/core/core-svc.yaml
apiVersion: v1
kind: Service
metadata:
  name: tanzu-harbor-harbor-core
  labels:
    heritage: Helm
    release: tanzu-harbor
    chart: harbor
    app: "harbor"
spec:
  ports:
    - port: 80
      targetPort: 8080
  selector:
    release: tanzu-harbor
    app: "harbor"
    component: core
---
# Source: harbor/templates/database/database-svc.yaml
apiVersion: v1
kind: Service
metadata:
  name: "tanzu-harbor-harbor-database"
  labels:
    heritage: Helm
    release: tanzu-harbor
    chart: harbor
    app: "harbor"
spec:
  ports:
    - port: 5432
  selector:
    release: tanzu-harbor
    app: "harbor"
    component: database
---
# Source: harbor/templates/jobservice/jobservice-svc.yaml
apiVersion: v1
kind: Service
metadata:
  name: "tanzu-harbor-harbor-jobservice"
  labels:
    heritage: Helm
    release: tanzu-harbor
    chart: harbor
    app: "harbor"
spec:
  ports:
    - port: 80
      targetPort: 8080
  selector:
    release: tanzu-harbor
    app: "harbor"
    component: jobservice
---
# Source: harbor/templates/notary/notary-svc.yaml
apiVersion: v1
kind: Service
metadata:
  name: tanzu-harbor-harbor-notary-server
  labels:
    heritage: Helm
    release: tanzu-harbor
    chart: harbor
    app: "harbor"
spec:
  ports:
    - port: 4443
  selector:
    release: tanzu-harbor
    app: "harbor"
    component: notary-server
---
# Source: harbor/templates/notary/notary-svc.yaml
apiVersion: v1
kind: Service
metadata:
  name: tanzu-harbor-harbor-notary-signer
  labels:
    heritage: Helm
    release: tanzu-harbor
    chart: harbor
    app: "harbor"
spec:
  ports:
    - port: 7899
  selector:
    release: tanzu-harbor
    app: "harbor"
    component: notary-signer
---
# Source: harbor/templates/portal/service.yaml
apiVersion: v1
kind: Service
metadata:
  name: "tanzu-harbor-harbor-portal"
  labels:
    heritage: Helm
    release: tanzu-harbor
    chart: harbor
    app: "harbor"
spec:
  ports:
    - port: 80
      targetPort: 8080
  selector:
    release: tanzu-harbor
    app: "harbor"
    component: portal
---
# Source: harbor/templates/redis/service.yaml
apiVersion: v1
kind: Service
metadata:
  name: tanzu-harbor-harbor-redis
  labels:
    heritage: Helm
    release: tanzu-harbor
    chart: harbor
    app: "harbor"
spec:
  ports:
    - port: 6379
  selector:
    release: tanzu-harbor
    app: "harbor"
    component: redis
---
# Source: harbor/templates/registry/registry-svc.yaml
apiVersion: v1
kind: Service
metadata:
  name: "tanzu-harbor-harbor-registry"
  labels:
    heritage: Helm
    release: tanzu-harbor
    chart: harbor
    app: "harbor"
spec:
  ports:
    - name: registry
      port: 5000
    - name: controller
      port: 8080
  selector:
    release: tanzu-harbor
    app: "harbor"
    component: registry
---
# Source: harbor/templates/trivy/trivy-svc.yaml
apiVersion: v1
kind: Service
metadata:
  name: "tanzu-harbor-harbor-trivy"
  labels:
    heritage: Helm
    release: tanzu-harbor
    chart: harbor
    app: "harbor"
spec:
  ports:
    - name: api-server
      protocol: TCP
      port: 8080
  selector:
    release: tanzu-harbor
    app: "harbor"
    component: trivy
---
# Source: harbor/templates/chartmuseum/chartmuseum-dpl.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: "tanzu-harbor-harbor-chartmuseum"
  labels:
    heritage: Helm
    release: tanzu-harbor
    chart: harbor
    app: "harbor"
    component: chartmuseum
spec:
  replicas: 1
  strategy:
    type: RollingUpdate
  selector:
    matchLabels:
      release: tanzu-harbor
      app: "harbor"
      component: chartmuseum
  template:
    metadata:
      labels:
        heritage: Helm
        release: tanzu-harbor
        chart: harbor
        app: "harbor"
        component: chartmuseum
      annotations:
        checksum/configmap: b0b72f264231c7204f8b897e8724817f5650dae7d7d7cac67dbc6ba03fa9d0bf
        checksum/secret: be627abcef18cb0337e78dcef94807e6d0c1bb0432710273ce18504294b13c1a
        checksum/secret-core: a65866d71e5aad31007e1a4b709881be912e7df38f328152afdff634f88f1d4f
    spec:
      securityContext:
        fsGroup: 10000
      containers:
        - name: chartmuseum
          image: goharbor/chartmuseum-photon:v2.0.2
          imagePullPolicy: IfNotPresent
          livenessProbe:
            httpGet:
              path: /health
              scheme: HTTP
              port: 9999
            initialDelaySeconds: 300
            periodSeconds: 10
          readinessProbe:
            httpGet:
              path: /health
              scheme: HTTP
              port: 9999
            initialDelaySeconds: 1
            periodSeconds: 10
          envFrom:
            - configMapRef:
                name: "tanzu-harbor-harbor-chartmuseum"
            - secretRef:
                name: "tanzu-harbor-harbor-chartmuseum"
          env:
            - name: BASIC_AUTH_PASS
              valueFrom:
                secretKeyRef:
                  name: tanzu-harbor-harbor-core
                  key: secret
          ports:
            - containerPort: 9999
          volumeMounts:
            - name: chartmuseum-data
              mountPath: /chart_storage
              subPath:
      volumes:
        - name: chartmuseum-data
          persistentVolumeClaim:
            claimName: tanzu-harbor-harbor-chartmuseum
---
# Source: harbor/templates/clair/clair-dpl.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: tanzu-harbor-harbor-clair
  labels:
    heritage: Helm
    release: tanzu-harbor
    chart: harbor
    app: "harbor"
    component: clair
spec:
  replicas: 1
  selector:
    matchLabels:
      release: tanzu-harbor
      app: "harbor"
      component: clair
  template:
    metadata:
      labels:
        heritage: Helm
        release: tanzu-harbor
        chart: harbor
        app: "harbor"
        component: clair
      annotations:
        checksum/secret: e97d96e13b02748f0954a2eff77e49070f2c0d641eb0dfb6ab5676d6d08a1faa
    spec:
      securityContext:
        fsGroup: 10000
      containers:
        - name: clair
          image: goharbor/clair-photon:v2.0.2
          imagePullPolicy: IfNotPresent
          livenessProbe:
            httpGet:
              path: /health
              port: 6061
            initialDelaySeconds: 300
            periodSeconds: 10
          readinessProbe:
            httpGet:
              path: /health
              port: 6061
            initialDelaySeconds: 30
            periodSeconds: 10
          args: ["-log-level", "info"]
          env:
            - name: HTTP_PROXY
              value: ""
            - name: HTTPS_PROXY
              value: ""
            - name: NO_PROXY
              value: "tanzu-harbor-harbor-core,tanzu-harbor-harbor-jobservice,tanzu-harbor-harbor-database,tanzu-harbor-harbor-chartmuseum,tanzu-harbor-harbor-clair,tanzu-harbor-harbor-notary-server,tanzu-harbor-harbor-notary-signer,tanzu-harbor-harbor-registry,tanzu-harbor-harbor-portal,tanzu-harbor-harbor-trivy,127.0.0.1,localhost,.local,.internal"
          ports:
            - containerPort: 6060
          volumeMounts:
            - name: config
              mountPath: /etc/clair/config.yaml
              subPath: config.yaml
        - name: adapter
          image: goharbor/clair-adapter-photon:v2.0.2
          imagePullPolicy: IfNotPresent
          livenessProbe:
            httpGet:
              path: /probe/healthy
              scheme: HTTP
              port: 8080
            initialDelaySeconds: 300
            periodSeconds: 10
          readinessProbe:
            httpGet:
              path: /probe/ready
              scheme: HTTP
              port: 8080
            initialDelaySeconds: 30
            periodSeconds: 10
          env:
            - name: SCANNER_CLAIR_URL
              # To avoid a pod cannot reach itself via service IP when the clusters disable hairpin
              value: "http://127.0.0.1:6060"
            - name: SCANNER_STORE_REDIS_URL
              valueFrom:
                secretKeyRef:
                  name: tanzu-harbor-harbor-clair
                  key: redis
            - name: SCANNER_CLAIR_DATABASE_URL
              valueFrom:
                secretKeyRef:
                  name: tanzu-harbor-harbor-clair
                  key: database
            - name: SCANNER_LOG_LEVEL
              value: "info"
          ports:
            - containerPort: 8080
      volumes:
        - name: config
          secret:
            secretName: "tanzu-harbor-harbor-clair"
---
# Source: harbor/templates/core/core-dpl.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: tanzu-harbor-harbor-core
  labels:
    heritage: Helm
    release: tanzu-harbor
    chart: harbor
    app: "harbor"
    component: core
spec:
  replicas: 1
  selector:
    matchLabels:
      release: tanzu-harbor
      app: "harbor"
      component: core
  template:
    metadata:
      labels:
        release: tanzu-harbor
        app: "harbor"
        component: core
      annotations:
        checksum/configmap: a2aefca1cf0ccba7dfb04a97314e2f805df24746918a375348a3fd13e1df8ae9
        checksum/secret: b342ff295b675de0c06791bb8cad119766d5aedb05d49a1e711c94926ed24661
        checksum/secret-jobservice: 8cba6ca247fee21599b30297b253cd9163d3adbff845ebc00bb63407625b6df8
    spec:
      securityContext:
        fsGroup: 10000
      containers:
        - name: core
          image: goharbor/harbor-core:v2.0.2
          imagePullPolicy: IfNotPresent
          livenessProbe:
            httpGet:
              path: /api/v2.0/ping
              scheme: HTTP
              port: 8080
            initialDelaySeconds: 300
            periodSeconds: 10
          readinessProbe:
            httpGet:
              path: /api/v2.0/ping
              scheme: HTTP
              port: 8080
            initialDelaySeconds: 20
            periodSeconds: 10
          envFrom:
            - configMapRef:
                name: "tanzu-harbor-harbor-core"
            - secretRef:
                name: "tanzu-harbor-harbor-core"
          env:
            - name: CORE_SECRET
              valueFrom:
                secretKeyRef:
                  name: tanzu-harbor-harbor-core
                  key: secret
            - name: JOBSERVICE_SECRET
              valueFrom:
                secretKeyRef:
                  name: "tanzu-harbor-harbor-jobservice"
                  key: JOBSERVICE_SECRET
          ports:
            - containerPort: 8080
          volumeMounts:
            - name: config
              mountPath: /etc/core/app.conf
              subPath: app.conf
            - name: secret-key
              mountPath: /etc/core/key
              subPath: key
            - name: token-service-private-key
              mountPath: /etc/core/private_key.pem
              subPath: tls.key
            - name: ca-download
              mountPath: /etc/core/ca
            - name: psc
              mountPath: /etc/core/token
      volumes:
        - name: config
          configMap:
            name: tanzu-harbor-harbor-core
            items:
              - key: app.conf
                path: app.conf
        - name: secret-key
          secret:
            secretName: tanzu-harbor-harbor-core
            items:
              - key: secretKey
                path: key
        - name: token-service-private-key
          secret:
            secretName: tanzu-harbor-harbor-core
        - name: ca-download
          secret:
            secretName: "tanzu-harbor-harbor-ingress"
        - name: psc
          emptyDir: {}
---
# Source: harbor/templates/jobservice/jobservice-dpl.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: "tanzu-harbor-harbor-jobservice"
  labels:
    heritage: Helm
    release: tanzu-harbor
    chart: harbor
    app: "harbor"
    component: jobservice
spec:
  replicas: 1
  strategy:
    type: RollingUpdate
  selector:
    matchLabels:
      release: tanzu-harbor
      app: "harbor"
      component: jobservice
  template:
    metadata:
      labels:
        heritage: Helm
        release: tanzu-harbor
        chart: harbor
        app: "harbor"
        component: jobservice
      annotations:
        checksum/configmap: eeb5fb29ddf91959faad1e1fa0349a80c33921a13dffeaa39273414f5aaddf17
        checksum/configmap-env: 4f3b7a4e99a4a69e0d1fab5b98a2d95cfb5e847243a03b6c88b6899ae5b7bb99
        checksum/secret: 202281eb4b30232137521d358dadf3fc500658c2596bd2cb951c800b39cd78b4
        checksum/secret-core: 732976ffeec6b08f4321b2d935c6c520bb613a0790fc1a0adc3cdd6ad2470002
    spec:
      securityContext:
        fsGroup: 10000
      containers:
        - name: jobservice
          image: goharbor/harbor-jobservice:v2.0.2
          imagePullPolicy: IfNotPresent
          livenessProbe:
            httpGet:
              path: /api/v1/stats
              scheme: HTTP
              port: 8080
            initialDelaySeconds: 300
            periodSeconds: 10
          readinessProbe:
            httpGet:
              path: /api/v1/stats
              scheme: HTTP
              port: 8080
            initialDelaySeconds: 20
            periodSeconds: 10
          env:
            - name: CORE_SECRET
              valueFrom:
                secretKeyRef:
                  name: tanzu-harbor-harbor-core
                  key: secret
          envFrom:
            - configMapRef:
                name: "tanzu-harbor-harbor-jobservice-env"
            - secretRef:
                name: "tanzu-harbor-harbor-jobservice"
          ports:
            - containerPort: 8080
          volumeMounts:
            - name: jobservice-config
              mountPath: /etc/jobservice/config.yml
              subPath: config.yml
            - name: job-logs
              mountPath: /var/log/jobs
              subPath:
      volumes:
        - name: jobservice-config
          configMap:
            name: "tanzu-harbor-harbor-jobservice"
        - name: job-logs
          persistentVolumeClaim:
            claimName: tanzu-harbor-harbor-jobservice
---
# Source: harbor/templates/notary/notary-server.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: tanzu-harbor-harbor-notary-server
  labels:
    heritage: Helm
    release: tanzu-harbor
    chart: harbor
    app: "harbor"
    component: notary-server
spec:
  replicas: 1
  selector:
    matchLabels:
      release: tanzu-harbor
      app: "harbor"
      component: notary-server
  template:
    metadata:
      labels:
        heritage: Helm
        release: tanzu-harbor
        chart: harbor
        app: "harbor"
        component: notary-server
      annotations:
        checksum/secret: fc3b94324d978c57a0cb1653bb53016969b9a23e035374431da71ae0763c6de9
        checksum/secret-core: 24561610875ce2a1c89e5600b07d1677227b979215688fa3c1fbcc9a9bf2bf24
    spec:
      securityContext:
        fsGroup: 10000
      containers:
        - name: notary-server
          image: goharbor/notary-server-photon:v2.0.2
          imagePullPolicy: IfNotPresent
          env:
            - name: MIGRATIONS_PATH
              value: migrations/server/postgresql
            - name: DB_URL
              value: postgres://postgres:changeit@tanzu-harbor-harbor-database:5432/notaryserver?sslmode=disable
          volumeMounts:
            - name: config
              mountPath: /etc/notary/server-config.postgres.json
              subPath: server.json
            - name: token-service-certificate
              mountPath: /root.crt
              subPath: tls.crt
            - name: signer-certificate
              mountPath: /etc/ssl/notary/ca.crt
              subPath: ca.crt
      volumes:
        - name: config
          secret:
            secretName: "tanzu-harbor-harbor-notary-server"
        - name: token-service-certificate
          secret:
            secretName: tanzu-harbor-harbor-core
        - name: signer-certificate
          secret:
            secretName: tanzu-harbor-harbor-notary-server
---
# Source: harbor/templates/notary/notary-signer.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: tanzu-harbor-harbor-notary-signer
  labels:
    heritage: Helm
    release: tanzu-harbor
    chart: harbor
    app: "harbor"
    component: notary-signer
spec:
  replicas: 1
  selector:
    matchLabels:
      release: tanzu-harbor
      app: "harbor"
      component: notary-signer
  template:
    metadata:
      labels:
        heritage: Helm
        release: tanzu-harbor
        chart: harbor
        app: "harbor"
        component: notary-signer
      annotations:
        checksum/secret: 7c3e67fb4e5d7b8445b393ff29729b5a9090883c6bcbc3bd1cae105cbce103dd
    spec:
      securityContext:
        fsGroup: 10000
      containers:
        - name: notary-signer
          image: goharbor/notary-signer-photon:v2.0.2
          imagePullPolicy: IfNotPresent
          env:
            - name: MIGRATIONS_PATH
              value: migrations/signer/postgresql
            - name: DB_URL
              value: postgres://postgres:changeit@tanzu-harbor-harbor-database:5432/notarysigner?sslmode=disable
            - name: NOTARY_SIGNER_DEFAULTALIAS
              value: defaultalias
          volumeMounts:
            - name: config
              mountPath: /etc/notary/signer-config.postgres.json
              subPath: signer.json
            - name: signer-certificate
              mountPath: /etc/ssl/notary/tls.crt
              subPath: tls.crt
            - name: signer-certificate
              mountPath: /etc/ssl/notary/tls.key
              subPath: tls.key
      volumes:
        - name: config
          secret:
            secretName: "tanzu-harbor-harbor-notary-server"
        - name: signer-certificate
          secret:
            secretName: tanzu-harbor-harbor-notary-server
---
# Source: harbor/templates/portal/deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: "tanzu-harbor-harbor-portal"
  labels:
    heritage: Helm
    release: tanzu-harbor
    chart: harbor
    app: "harbor"
    component: portal
spec:
  replicas: 1
  selector:
    matchLabels:
      release: tanzu-harbor
      app: "harbor"
      component: portal
  template:
    metadata:
      labels:
        release: tanzu-harbor
        app: "harbor"
        component: portal
      annotations:
    spec:
      containers:
        - name: portal
          image: goharbor/harbor-portal:v2.0.2
          imagePullPolicy: IfNotPresent
          livenessProbe:
            httpGet:
              path: /
              scheme: HTTP
              port: 8080
            initialDelaySeconds: 300
            periodSeconds: 10
          readinessProbe:
            httpGet:
              path: /
              scheme: HTTP
              port: 8080
            initialDelaySeconds: 1
            periodSeconds: 10
          ports:
            - containerPort: 8080
          volumeMounts:
            - name: portal-config
              mountPath: /etc/nginx/nginx.conf
              subPath: nginx.conf
      volumes:
        - name: portal-config
          configMap:
            name: "tanzu-harbor-harbor-portal"
---
# Source: harbor/templates/registry/registry-dpl.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: "tanzu-harbor-harbor-registry"
  labels:
    heritage: Helm
    release: tanzu-harbor
    chart: harbor
    app: "harbor"
    component: registry
spec:
  replicas: 1
  strategy:
    type: RollingUpdate
  selector:
    matchLabels:
      release: tanzu-harbor
      app: "harbor"
      component: registry
  template:
    metadata:
      labels:
        heritage: Helm
        release: tanzu-harbor
        chart: harbor
        app: "harbor"
        component: registry
      annotations:
        checksum/configmap: e26d52573648b59a142e58415d9845739abafc740f08d8c70f32fc80132e28f4
        checksum/secret: 3422b5fd798205a370b5c5d59e355c5bbd72c56502907309116b2f2393d428c6
        checksum/secret-jobservice: e44c4c728458bc55e0ab7a92fef56718892c79fab7f5992b43bc9d9f0156c135
        checksum/secret-core: d53738e93c2d3c20fbfc174a08322b87cc79f625d8398ae4680def0ae5047056
    spec:
      securityContext:
        fsGroup: 10000
      containers:
        - name: registry
          image: goharbor/registry-photon:v2.0.2
          imagePullPolicy: IfNotPresent
          livenessProbe:
            httpGet:
              path: /
              scheme: HTTP
              port: 5000
            initialDelaySeconds: 300
            periodSeconds: 10
          readinessProbe:
            httpGet:
              path: /
              scheme: HTTP
              port: 5000
            initialDelaySeconds: 1
            periodSeconds: 10
          args: ["serve", "/etc/registry/config.yml"]
          envFrom:
            - secretRef:
                name: "tanzu-harbor-harbor-registry"
          env:
          ports:
            - containerPort: 5000
            - containerPort: 5001
          volumeMounts:
            - name: registry-data
              mountPath: /storage
              subPath:
            - name: registry-root-certificate
              mountPath: /etc/registry/root.crt
              subPath: tls.crt
            - name: registry-htpasswd
              mountPath: /etc/registry/passwd
              subPath: passwd
            - name: registry-config
              mountPath: /etc/registry/config.yml
              subPath: config.yml
        - name: registryctl
          image: goharbor/harbor-registryctl:v2.0.2
          imagePullPolicy: IfNotPresent
          livenessProbe:
            httpGet:
              path: /api/health
              scheme: HTTP
              port: 8080
            initialDelaySeconds: 300
            periodSeconds: 10
          readinessProbe:
            httpGet:
              path: /api/health
              scheme: HTTP
              port: 8080
            initialDelaySeconds: 1
            periodSeconds: 10
          args: ["serve", "/etc/registry/config.yml"]
          envFrom:
            - secretRef:
                name: "tanzu-harbor-harbor-registry"
          env:
            - name: CORE_SECRET
              valueFrom:
                secretKeyRef:
                  name: tanzu-harbor-harbor-core
                  key: secret
            - name: JOBSERVICE_SECRET
              valueFrom:
                secretKeyRef:
                  name: tanzu-harbor-harbor-jobservice
                  key: JOBSERVICE_SECRET
          ports:
            - containerPort: 8080
          volumeMounts:
            - name: registry-data
              mountPath: /storage
              subPath:
            - name: registry-config
              mountPath: /etc/registry/config.yml
              subPath: config.yml
            - name: registry-config
              mountPath: /etc/registryctl/config.yml
              subPath: ctl-config.yml
      volumes:
        - name: registry-htpasswd
          secret:
            secretName: tanzu-harbor-harbor-registry
            items:
              - key: REGISTRY_HTPASSWD
                path: passwd
        - name: registry-root-certificate
          secret:
            secretName: tanzu-harbor-harbor-core
        - name: registry-config
          configMap:
            name: "tanzu-harbor-harbor-registry"
        - name: registry-data
          persistentVolumeClaim:
            claimName: tanzu-harbor-harbor-registry
---
# Source: harbor/templates/database/database-ss.yaml
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: "tanzu-harbor-harbor-database"
  labels:
    heritage: Helm
    release: tanzu-harbor
    chart: harbor
    app: "harbor"
    component: database
spec:
  replicas: 1
  serviceName: "tanzu-harbor-harbor-database"
  selector:
    matchLabels:
      release: tanzu-harbor
      app: "harbor"
      component: database
  template:
    metadata:
      labels:
        heritage: Helm
        release: tanzu-harbor
        chart: harbor
        app: "harbor"
        component: database
      annotations:
        checksum/secret: 543ff45bb62d2efa309599a3a6c2f260ddf94c044e8b8b9ff78fde6c89b20272
    spec:
      initContainers:
        - name: "change-permission-of-directory"
          securityContext:
            runAsUser: 0
          image: goharbor/harbor-db:v2.0.2
          imagePullPolicy: IfNotPresent
          command: ["/bin/sh"]
          args: ["-c", "chown -R postgres:postgres /var/lib/postgresql/data"]
          volumeMounts:
            - name: database-data
              mountPath: /var/lib/postgresql/data
              subPath:
        - name: "remove-lost-found"
          image: goharbor/harbor-db:v2.0.2
          imagePullPolicy: IfNotPresent
          command: ["rm", "-Rf", "/var/lib/postgresql/data/lost+found"]
          volumeMounts:
            - name: database-data
              mountPath: /var/lib/postgresql/data
              subPath:
      containers:
        - name: database
          image: goharbor/harbor-db:v2.0.2
          imagePullPolicy: IfNotPresent
          livenessProbe:
            exec:
              command:
                - /docker-healthcheck.sh
            initialDelaySeconds: 300
            periodSeconds: 10
          readinessProbe:
            exec:
              command:
                - /docker-healthcheck.sh
            initialDelaySeconds: 1
            periodSeconds: 10
          envFrom:
            - secretRef:
                name: "tanzu-harbor-harbor-database"
          volumeMounts:
            - name: database-data
              mountPath: /var/lib/postgresql/data
              subPath:
  volumeClaimTemplates:
    - metadata:
        name: "database-data"
        labels:
          heritage: Helm
          release: tanzu-harbor
          chart: harbor
          app: "harbor"
      spec:
        accessModes: ["ReadWriteOnce"]
        resources:
          requests:
            storage: "1Gi"
---
# Source: harbor/templates/redis/statefulset.yaml
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: tanzu-harbor-harbor-redis
  labels:
    heritage: Helm
    release: tanzu-harbor
    chart: harbor
    app: "harbor"
    component: redis
spec:
  replicas: 1
  serviceName: tanzu-harbor-harbor-redis
  selector:
    matchLabels:
      release: tanzu-harbor
      app: "harbor"
      component: redis
  template:
    metadata:
      labels:
        heritage: Helm
        release: tanzu-harbor
        chart: harbor
        app: "harbor"
        component: redis
    spec:
      securityContext:
        fsGroup: 999
      containers:
        - name: redis
          image: goharbor/redis-photon:v2.0.2
          imagePullPolicy: IfNotPresent
          livenessProbe:
            tcpSocket:
              port: 6379
            initialDelaySeconds: 300
            periodSeconds: 10
          readinessProbe:
            tcpSocket:
              port: 6379
            initialDelaySeconds: 1
            periodSeconds: 10
          volumeMounts:
            - name: data
              mountPath: /var/lib/redis
              subPath:
  volumeClaimTemplates:
    - metadata:
        name: data
        labels:
          heritage: Helm
          release: tanzu-harbor
          chart: harbor
          app: "harbor"
      spec:
        accessModes: ["ReadWriteOnce"]
        resources:
          requests:
            storage: "1Gi"
---
# Source: harbor/templates/trivy/trivy-sts.yaml
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: tanzu-harbor-harbor-trivy
  labels:
    heritage: Helm
    release: tanzu-harbor
    chart: harbor
    app: "harbor"
    component: trivy
spec:
  replicas: 1
  serviceName: tanzu-harbor-harbor-trivy
  selector:
    matchLabels:
      release: tanzu-harbor
      app: "harbor"
      component: trivy
  template:
    metadata:
      labels:
        heritage: Helm
        release: tanzu-harbor
        chart: harbor
        app: "harbor"
        component: trivy
      annotations:
        checksum/secret: 3589ca067bc8c233aab21232aefd11dfc764455c933006cb4415f28787d75453
    spec:
      securityContext:
        runAsNonRoot: true
        runAsUser: 10000
        fsGroup: 10000
      automountServiceAccountToken: false
      containers:
        - name: trivy
          image: goharbor/trivy-adapter-photon:v2.0.2
          imagePullPolicy: IfNotPresent
          securityContext:
            privileged: false
            allowPrivilegeEscalation: false
          env:
            - name: HTTP_PROXY
              value: ""
            - name: HTTPS_PROXY
              value: ""
            - name: NO_PROXY
              value: "tanzu-harbor-harbor-core,tanzu-harbor-harbor-jobservice,tanzu-harbor-harbor-database,tanzu-harbor-harbor-chartmuseum,tanzu-harbor-harbor-clair,tanzu-harbor-harbor-notary-server,tanzu-harbor-harbor-notary-signer,tanzu-harbor-harbor-registry,tanzu-harbor-harbor-portal,tanzu-harbor-harbor-trivy,127.0.0.1,localhost,.local,.internal"
            - name: "SCANNER_LOG_LEVEL"
              value: "info"
            - name: "SCANNER_TRIVY_CACHE_DIR"
              value: "/home/scanner/.cache/trivy"
            - name: "SCANNER_TRIVY_REPORTS_DIR"
              value: "/home/scanner/.cache/reports"
            - name: "SCANNER_TRIVY_DEBUG_MODE"
              value: "false"
            - name: "SCANNER_TRIVY_VULN_TYPE"
              value: "os,library"
            - name: "SCANNER_TRIVY_GITHUB_TOKEN"
              valueFrom:
                secretKeyRef:
                  name: tanzu-harbor-harbor-trivy
                  key: gitHubToken
            - name: "SCANNER_TRIVY_SEVERITY"
              value: "UNKNOWN,LOW,MEDIUM,HIGH,CRITICAL"
            - name: "SCANNER_TRIVY_IGNORE_UNFIXED"
              value: "false"
            - name: "SCANNER_TRIVY_SKIP_UPDATE"
              value: "false"
            - name: "SCANNER_TRIVY_INSECURE"
              value: "false"
            - name: SCANNER_API_SERVER_ADDR
              value: ":8080"
            - name: "SCANNER_STORE_REDIS_URL"
              valueFrom:
                secretKeyRef:
                  name: tanzu-harbor-harbor-trivy
                  key: redisURL
            - name: "SCANNER_JOB_QUEUE_REDIS_URL"
              valueFrom:
                secretKeyRef:
                  name: tanzu-harbor-harbor-trivy
                  key: redisURL
          ports:
            - name: api-server
              containerPort: 8080
          volumeMounts:
            - name: data
              mountPath: /home/scanner/.cache
              subPath:
              readOnly: false
          livenessProbe:
            httpGet:
              scheme: HTTP
              path: /probe/healthy
              port: api-server
            initialDelaySeconds: 5
            periodSeconds: 10
            successThreshold: 1
            failureThreshold: 10
          readinessProbe:
            httpGet:
              scheme: HTTP
              path: /probe/ready
              port: api-server
            initialDelaySeconds: 5
            periodSeconds: 10
            successThreshold: 1
            failureThreshold: 3
          resources:
            limits:
              cpu: 1
              memory: 1Gi
            requests:
              cpu: 200m
              memory: 512Mi
  volumeClaimTemplates:
    - metadata:
        name: data
        labels:
          heritage: Helm
          release: tanzu-harbor
          chart: harbor
          app: "harbor"
      spec:
        accessModes: ["ReadWriteOnce"]
        resources:
          requests:
            storage: "5Gi"
---
# Source: harbor/templates/ingress/ingress.yaml
apiVersion: extensions/v1beta1
kind: Ingress
metadata:
  name: "tanzu-harbor-harbor-ingress"
  labels:
    heritage: Helm
    release: tanzu-harbor
    chart: harbor
    app: "harbor"
  annotations:
    ingress.kubernetes.io/proxy-body-size: "0"
    ingress.kubernetes.io/ssl-redirect: "true"
    kubernetes.io/ingress.class: contour
    nginx.ingress.kubernetes.io/proxy-body-size: "0"
    nginx.ingress.kubernetes.io/ssl-redirect: "true"

spec:
  # tls:
  # - secretName: "tanzu-harbor-harbor-ingress"
  #   hosts:
  #   - harbor.cluster-1.poc.yogendra.me
  rules:
    - http:
        paths:
          - path: /
            backend:
              serviceName: tanzu-harbor-harbor-portal
              servicePort: 80
          - path: /api/
            backend:
              serviceName: tanzu-harbor-harbor-core
              servicePort: 80
          - path: /service/
            backend:
              serviceName: tanzu-harbor-harbor-core
              servicePort: 80
          - path: /v2/
            backend:
              serviceName: tanzu-harbor-harbor-core
              servicePort: 80
          - path: /chartrepo/
            backend:
              serviceName: tanzu-harbor-harbor-core
              servicePort: 80
          - path: /c/
            backend:
              serviceName: tanzu-harbor-harbor-core
              servicePort: 80
      host: harbor.cluster-1.poc.yogendra.me
---
# Source: harbor/templates/ingress/ingress.yaml
apiVersion: extensions/v1beta1
kind: Ingress
metadata:
  name: "tanzu-harbor-harbor-ingress-notary"
  labels:
    heritage: Helm
    release: tanzu-harbor
    chart: harbor
    app: "harbor"
  annotations:
    ingress.kubernetes.io/proxy-body-size: "0"
    ingress.kubernetes.io/ssl-redirect: "true"
    kubernetes.io/ingress.class: contour
    nginx.ingress.kubernetes.io/proxy-body-size: "0"
    nginx.ingress.kubernetes.io/ssl-redirect: "true"

spec:
  tls:
    - secretName: "tanzu-harbor-harbor-ingress"
      hosts:
        - notrary.cluster-1.poc.yogendra.me
  rules:
    - http:
        paths:
          - path: /
            backend:
              serviceName: tanzu-harbor-harbor-notary-server
              servicePort: 4443
      host: notrary.cluster-1.poc.yogendra.me
